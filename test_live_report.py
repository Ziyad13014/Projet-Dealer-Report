#!/usr/bin/env python3
"""
Test script pour g√©n√©rer un rapport avec les vraies donn√©es API
"""

import os
import sys
import json
import requests
from datetime import datetime
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()

def test_api_connection():
    """Test de connexion √† l'API SpiderVision"""
    
    # Configuration API
    api_base = os.getenv('SPIDER_VISION_API_BASE', 'https://food-api-spider-vision.data-solutions.com')
    jwt_token = os.getenv('SPIDER_VISION_JWT_TOKEN')
    overview_endpoint = os.getenv('SPIDER_VISION_OVERVIEW_ENDPOINT', '/store-history/overview')
    
    if not jwt_token:
        print("‚ùå Token JWT manquant dans .env")
        return None
    
    print(f"üîó Test connexion API: {api_base}{overview_endpoint}")
    
    # Headers avec authentification
    headers = {
        'Authorization': f'Bearer {jwt_token}',
        'Content-Type': 'application/json',
        'Accept': 'application/json'
    }
    
    try:
        # Appel API
        response = requests.get(f"{api_base}{overview_endpoint}", headers=headers, timeout=30)
        
        print(f"üì° Status Code: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ API OK - {len(data)} retailers trouv√©s")
            
            # Afficher quelques exemples
            for i, retailer in enumerate(data[:3]):
                name = retailer.get('retailer_name', 'Unknown')
                print(f"   {i+1}. {name}")
            
            return data
        else:
            print(f"‚ùå Erreur API: {response.status_code}")
            print(f"Response: {response.text[:200]}...")
            return None
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur connexion: {e}")
        return None

def generate_real_report():
    """G√©n√®re un rapport avec les vraies donn√©es"""
    
    # Test API
    data = test_api_connection()
    if not data:
        print("‚ùå Impossible de r√©cup√©rer les donn√©es API")
        return
    
    print(f"\nüéØ G√©n√©ration du rapport avec {len(data)} retailers...")
    
    # Import des fonctions du script principal
    try:
        from generate_last_day_report import process_retailer_data, create_progress_bar, get_worst_status
        print("‚úÖ Fonctions import√©es")
    except ImportError as e:
        print(f"‚ùå Erreur import: {e}")
        return
    
    # Traitement des donn√©es
    processed_data = []
    for retailer_data in data:
        try:
            processed = process_retailer_data(retailer_data)
            processed_data.append(processed)
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur traitement {retailer_data.get('retailer_name', 'Unknown')}: {e}")
    
    print(f"‚úÖ {len(processed_data)} retailers trait√©s")
    
    # G√©n√©ration HTML simple
    current_time = datetime.now().strftime("%d/%m/%Y √† %H:%M")
    
    html_content = f"""<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <title>Rapport SpiderVision Live - {current_time}</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; }}
        table {{ border-collapse: collapse; width: 100%; }}
        th, td {{ border: 1px solid #ddd; padding: 12px; text-align: left; }}
        th {{ background-color: #f2f2f2; }}
        .success {{ color: green; font-weight: bold; }}
        .warning {{ color: orange; font-weight: bold; }}
        .error {{ color: red; font-weight: bold; }}
        .error-critical {{ color: darkred; font-weight: bold; }}
    </style>
</head>
<body>
    <h1>üìä Rapport SpiderVision Live</h1>
    <p>G√©n√©r√© le {current_time} avec {len(processed_data)} retailers</p>
    
    <table>
        <thead>
            <tr>
                <th>Enseigne</th>
                <th>Progress (%)</th>
                <th>Statut Progress</th>
                <th>Success (%)</th>
                <th>Statut Success</th>
                <th>Statut Global</th>
            </tr>
        </thead>
        <tbody>
"""
    
    for retailer in processed_data:
        status_class = retailer['global_status'].lower().replace('!', '-critical')
        html_content += f"""
            <tr>
                <td><strong>{retailer['retailer_name']}</strong></td>
                <td>{retailer['progress_avg']:.1f}%</td>
                <td class="{retailer['progress_status'].lower().replace('!', '-critical')}">{retailer['progress_status']}</td>
                <td>{retailer['success_avg']:.1f}%</td>
                <td class="{retailer['success_status'].lower().replace('!', '-critical')}">{retailer['success_status']}</td>
                <td class="{status_class}">{retailer['global_status']}</td>
            </tr>"""
    
    html_content += """
        </tbody>
    </table>
</body>
</html>"""
    
    # Sauvegarde
    filename = f"reports/live_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html"
    os.makedirs('reports', exist_ok=True)
    
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    print(f"‚úÖ Rapport sauvegard√©: {filename}")
    return filename

if __name__ == "__main__":
    print("üöÄ Test g√©n√©ration rapport live SpiderVision\n")
    generate_real_report()
