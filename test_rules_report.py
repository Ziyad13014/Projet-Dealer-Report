#!/usr/bin/env python3
"""Test de g√©n√©ration du rapport HTML avec r√®gles m√©tier"""

import os
import sys
import pandas as pd
from dotenv import load_dotenv

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
load_dotenv()

def test_rules_html_generation():
    try:
        # Lire les donn√©es CSV existantes
        csv_path = "reports/spider_vision_overview_20250909_103512.csv"
        if not os.path.exists(csv_path):
            print("‚ùå Fichier CSV non trouv√©")
            return
        
        # Charger les donn√©es CSV
        df = pd.read_csv(csv_path)
        data = df.to_dict('records')
        
        print(f"‚úÖ Donn√©es CSV charg√©es: {len(data)} retailers")
        
        # G√©n√©rer le rapport HTML avec r√®gles
        from cli.services.html_export import HTMLExporter
        
        html_exporter = HTMLExporter()
        html_path = html_exporter.generate_html_report(data, "reports/spider_vision_rules_report.html")
        
        print(f"‚úÖ Rapport HTML avec r√®gles g√©n√©r√©: {html_path}")
        
        # V√©rifier que le fichier existe
        if os.path.exists(html_path):
            file_size = os.path.getsize(html_path)
            print(f"‚úÖ Fichier HTML cr√©√© ({file_size} bytes)")
            print(f"üåê Ouvrez le fichier: {os.path.abspath(html_path)}")
        else:
            print("‚ùå Fichier HTML non cr√©√©")
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_rules_html_generation()
